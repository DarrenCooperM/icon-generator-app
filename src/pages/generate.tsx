import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { Button } from "~/component/Button";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";
import { FiDownload } from "react-icons/fi";
import { Company } from "~/component/GenerateInputs/Company";
import { Business } from "~/component/GenerateInputs/Business";
import { Colour } from "~/component/GenerateInputs/Colour";
import { Shape } from "~/component/GenerateInputs/Shape";
import { Logo } from "~/component/GenerateInputs/Logo";
import { AbstractLiteral } from "~/component/GenerateInputs/AbstractLiteral";
import { Imagery } from "~/component/GenerateInputs/Imagery";
import { Theme } from "~/component/GenerateInputs/Theme";
import { NumberOfLogos } from "~/component/GenerateInputs/NumberOfLogos";

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
    company: "",
    colour: "",
    shape: "",
    style: "",
    numberOfIcons: "1",
    abstractLiteral: "",
    imagery: "",
    mood: "",
  });
  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      setError(error.message);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    generateIcon.mutate({
      ...form,
      numberOfIcons: parseInt(form.numberOfIcons),
    });
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  function handleDownload(imageUrl: string) {
    const link = document.createElement("a");
    link.href = imageUrl;
    link.download = "image.jpg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  return (
    <>
      <Head>
        <title>Generate Logo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mb-16 mt-12 flex min-h-screen flex-col gap-4 px-8 lg:mt-24">
        <h1 className="text-4xl lg:text-6xl">Generate your Logos</h1>
        <p className="mb-12 text-xl lg:text-2xl">
          Fill out the form below to start generating your logos.
        </p>
        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>
          <Company updateForm={updateForm} form={form} />
          <Business updateForm={updateForm} form={form} />
          <Colour form={form} setForm={setForm} />
          <Shape form={form} setForm={setForm} />
          <Logo form={form} setForm={setForm} />
          <AbstractLiteral updateForm={updateForm} form={form} />
          <Imagery updateForm={updateForm} form={form} />
          <Theme updateForm={updateForm} form={form} />
          <NumberOfLogos updateForm={updateForm} form={form} />

          {error && (
            <div className="rounded bg-red-500 p-8 text-xl text-white">
              {error}
            </div>
          )}
          <Button
            isLoading={generateIcon.isLoading}
            disabled={generateIcon.isLoading}
          >
            Generate
          </Button>
        </form>

        {imagesUrl.length > 0 && (
          <>
            <h2 className="text-xl">Your Logos</h2>
            <section className="mb-12 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
              {imagesUrl.map(({ imageUrl }) => (
                <div key={imageUrl}>
                  <div className="relative">
                    <Image
                      src={imageUrl}
                      alt="an image of your generated prompt"
                      width="1024"
                      height="1024"
                      className="w-full rounded-xl"
                    />
                    <FiDownload
                      className="absolute right-0 top-0 cursor-pointer text-3xl text-white hover:text-black dark:text-white dark:hover:text-black"
                      onClick={() => handleDownload(imageUrl)}
                    />
                  </div>
                </div>
              ))}
            </section>
          </>
        )}
      </main>
    </>
  );
};

export default GeneratePage;
