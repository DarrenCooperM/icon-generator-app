import { type NextPage } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { Button } from "~/component/Button";
import { api } from "~/utils/api";
import { FiDownload } from "react-icons/fi";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";

const colours = [
  { name: "blue", image: "/Colours/blue.jpg" },
  { name: "red", image: "/Colours/red.jpg" },
  { name: "green", image: "/Colours/green.jpg" },
  { name: "purple", image: "/Colours/purple.jpg" },
  { name: "orange", image: "/Colours/orange.jpg" },
  { name: "lightGreen", image: "/Colours/lightGreen.jpg" },
  { name: "pink", image: "/Colours/pink.jpg" },
  { name: "yellow", image: "/Colours/yellow.jpg" },
  { name: "black", image: "/Colours/black.jpg" },
  { name: "white", image: "/Colours/white.jpg" },
  { name: "teal", image: "/Colours/teal.jpg" },
  { name: "grey", image: "/Colours/grey.jpg" },
];

const shapes = ["square", "circle", "rounded"];

const styles = [
  "minimalistic",
  "flat",
  "gradient",
  "metallic",
  "3D",
  "realistic",
  "polygon",
  "isometric",
  "illustrated",
  "watercolor",
];

const GeneratePage: NextPage = () => {
  const { data: sessionData } = useSession();
  // Define the state for the form, error message, and image URLs
  const [form, setForm] = useState({
    prompt: "",
    company: "",
    colour: "",
    shape: "",
    style: "",
    numberOfIcons: "1",
    abstractLiteral: "",
    imagery: "",
    mood: "",
  });
  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);
  // Define the mutation to generate an icon
  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      setError(error.message);
    },
  });

  // Define a function to handle form submission
  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    generateIcon.mutate({
      ...form,
      numberOfIcons: parseInt(form.numberOfIcons),
    });
  }

  // Define a function to update form values
  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  // Define a function to handle downloading of images
  function handleDownload(imageUrl: string) {
    const link = document.createElement("a");
    link.href = imageUrl;
    link.download = "image.jpg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
  return (
    <>
      <Head>
        <title>Generate Logo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mb-16 mt-12 flex min-h-screen flex-col gap-4 px-8 lg:mt-24">
        <h1 className="mb-8 flex justify-center text-4xl font-medium lg:text-6xl">
          Generate your Logos
        </h1>
        <p className="mb-12 text-xl lg:text-2xl">
          Fill out the form below to start generating your logos.
        </p>
        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>
          <h2 className=" text-xl lg:text-2xl">
            1. What is the name of your company?
          </h2>
          <FormGroup className="mb-12">
            <Input
              placeholder="e.g. Spark, Air New Zealand"
              required
              value={form.company}
              onChange={updateForm("company")}
            ></Input>
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            2. Describe your business or industry.
          </h2>
          <FormGroup className="mb-12">
            <Input
              placeholder="e.g. Technology, Telecommunications"
              required
              value={form.prompt}
              onChange={updateForm("prompt")}
            ></Input>
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            3. Pick a primary color for your logo.
          </h2>
          <FormGroup className="mb-12 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-12">
            {colours.map((colour) => (
              <label key={colour.name} className="flex items-center">
                <Image
                  width={100}
                  height={100}
                  src={colour.image}
                  alt={colour.name}
                  className={`h-24 w-24 rounded-lg border-4 md:h-20 md:w-20 ${
                    colour.name === form.colour
                      ? "border-blue-500"
                      : "border-transparent"
                  }`}
                  onClick={() =>
                    setForm((prev) => ({ ...prev, colour: colour.name }))
                  }
                />
              </label>
            ))}
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            4. Pick a shape for your logo.
          </h2>
          <FormGroup className="mb-12 flex flex-col gap-4 sm:grid sm:grid-cols-2 md:grid md:grid-cols-4">
            {shapes.map((shape) => (
              <label
                key={shape}
                className="flex items-center gap-2  text-xl sm:text-xl md:mb-0 md:text-xl lg:text-2xl"
              >
                <input
                  required
                  type="radio"
                  name="shape"
                  checked={shape === form.shape}
                  onChange={() => setForm((prev) => ({ ...prev, shape }))}
                ></input>
                {shape}
              </label>
            ))}
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            5. Pick a style for your logo.
          </h2>
          <FormGroup className="mb-12 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
            {styles.map((style) => (
              <label
                key={style}
                className="flex items-center gap-2  text-xl sm:text-xl md:mb-0 md:text-xl lg:text-2xl"
              >
                <input
                  required
                  type="radio"
                  name="style"
                  checked={style === form.style}
                  onChange={() => setForm((prev) => ({ ...prev, style }))}
                />
                {style}
              </label>
            ))}
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            6. Do you want your logo to be more abstract or literal?
          </h2>
          <FormGroup className="mb-12">
            <Input
              placeholder="e.g. Abstract"
              required
              value={form.abstractLiteral}
              onChange={updateForm("abstractLiteral")}
            ></Input>
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            7. Provide any specific imagery you want in your logo.
          </h2>
          <FormGroup className="mb-12">
            <Input
              placeholder="e.g. Trees, mountains, ocean"
              value={form.imagery}
              onChange={updateForm("imagery")}
            ></Input>
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            8. What mood or theme do you want your logo to convey?
          </h2>
          <FormGroup className="mb-12">
            <Input
              placeholder="e.g. Modern, retro, luxurious, playful"
              required
              value={form.mood}
              onChange={updateForm("mood")}
            ></Input>
          </FormGroup>

          <h2 className=" text-xl lg:text-2xl">
            9. How many logos do you want?
          </h2>
          <FormGroup className="mb-12">
            <label>Number of logos</label>
            <Input
              inputMode="numeric"
              pattern="[1-9]|10"
              value={form.numberOfIcons}
              required
              onChange={updateForm("numberOfIcons")}
            ></Input>
          </FormGroup>

          {error && (
            <div className="rounded bg-red-500 p-8 text-xl text-white">
              {error}
            </div>
          )}
          {sessionData ? (
            <Button
              isLoading={generateIcon.isLoading}
              disabled={generateIcon.isLoading}
            >
              Generate Logo
            </Button>
          ) : (
            <button
              onClick={() => {
                signIn().catch(console.error);
              }}
              className="rounded bg-blue-900 px-4 py-2 text-center font-medium ease-in-out hover:bg-blue-600 hover:transition-colors md:w-full md:self-center"
            >
              Log in to start
            </button>
          )}
        </form>

        {imagesUrl.length > 0 && (
          <>
            <h2 className="text-xl">Your Logos</h2>
            <section className="mb-12 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
              {imagesUrl.map(({ imageUrl }) => (
                <div key={imageUrl}>
                  <div className="relative">
                    <Image
                      src={imageUrl}
                      alt="an image of your generated prompt"
                      width="1024"
                      height="1024"
                      className="w-full rounded-xl"
                    />
                    <FiDownload
                      className="absolute right-0 top-0 cursor-pointer text-3xl text-white hover:text-black dark:text-white dark:hover:text-black"
                      onClick={() => handleDownload(imageUrl)}
                    />
                  </div>
                </div>
              ))}
            </section>
          </>
        )}
      </main>
    </>
  );
};

export default GeneratePage;
